import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import Normalize
from matplotlib.cm import ScalarMappable

# Define the size of the large square
large_square_size = 11

# Define the size of the smaller squares
small_square_size = 1

# Define the number of small squares along each side (excluding corners)
num_squares_side = 8

# Create the figure and axis
fig, ax = plt.subplots(figsize=(8, 8))

# Plot the large square
large_square = plt.Rectangle((0, 0), large_square_size, large_square_size, color='lightgrey', alpha=0.5)
ax.add_patch(large_square)

# Store the Coordinates
coords = [(10,0), (9,0), (8,0), (7,0), (6,0), (5,0), (4,0), (3,0), (2,0), (1,0), 
          (0,0), (0,1), (0,2), (0,3), (0,4), (0,5), (0,6), (0,7), (0,8), (0,9), (0,10),
          (1,10), (2,10), (3,10), (4,10), (5,10), (6,10), (7,10), (8,10), (9,10), (10,10),
          (10,9), (10,8), (10,7), (10,6), (10,5), (10,4), (10,3), (10,2), (10,1)]

# Distributions overall measured
percent_overall = [0.030141365556303326, 0.020740068282064594, 0.0183123671457018, 0.021067520326170704, 0.022687567460447904, 0.028891242692451503, 0.022063873916475563, 0.00844470115728944, 0.022646369988972577, 0.022453892298488928, 0.06060313797142487, 0.026350402543021095, 0.025380182088578167, 0.023116540180571486, 0.024025520506707802, 0.02848834180352258, 0.027217414605426662, 0.025324723416734803, 0.028612298664639612, 0.030068178662585213, 0.028105102512198152, 0.027634687984011697, 0.010224088236651463, 0.026656030419605244, 0.031044348463011833, 0.02987038937107382, 0.026377332639557577, 0.026098027252340037, 0.02734704222177323, 0.025190086018261955, 0.025677597197938017, 0.02607277693308955, 0.025561843401148303, 0.023035781351870427, 0.024345373712343885, 0.023683343140328186, 0.008436274338277256, 0.02125904095817966, 0.021214593751284507, 0.02553053082947656]

percent_steady = [0.02979520722881103, 0.020805810042658395, 0.018494950385630735, 0.021077432284862006, 0.022641181512666038, 0.02884773292847713, 0.021968294915567718, 0.008415095684942616, 0.02254430788094695, 0.0223854477518096, 0.06084769540815935, 0.02628900075531833, 0.025329989961047978, 0.023103669895367808, 0.023995608784316627, 0.028441299609675143, 0.027205092518622756, 0.02550458037447871, 0.02860307059207864, 0.030051798414379813, 0.028094495999895733, 0.02762496669336098, 0.01021074036347828, 0.02664230499230296, 0.031034797740052703, 0.029862629875221876, 0.02637073226720803, 0.026085074391013797, 0.027340215068984992, 0.025171769804295082, 0.0256486103274277, 0.026053334613644907, 0.025532737031173154, 0.02338760421447785, 0.02431584558744104, 0.023687639175045076, 0.008438323334401228, 0.02131637603900079, 0.021221955829141454, 0.025612579722655064]

percent_winners = [0.029089472686147495, 0.019983728936928454, 0.017879043277419755, 0.02098069959175729, 0.022275995192289417, 0.02924887697506409, 0.02289840800245731, 0.008809017673181267, 0.023334808919086274, 0.023175223626056604, 0.05955904139980375, 0.027134356758744867, 0.025217312029792795, 0.023554125569431397, 0.02446560194818347, 0.028389318609412975, 0.027430750993908667, 0.025308658772192388, 0.028669784482625988, 0.030014283034562918, 0.028871935909580964, 0.02752776919851801, 0.010072516884516177, 0.026598071739049507, 0.030951039654441428, 0.029363090570415758, 0.02632725941853394, 0.02607813742423545, 0.027129650651804862, 0.02533125411897485, 0.024851201043742117, 0.026007877661009343, 0.02530208228941725, 0.022713210627427226, 0.023688671960152063, 0.022671790852884743, 0.008073567794396703, 0.023566373514416285, 0.019745225850597153, 0.02771076435683899]

percent_bankrupt = [0.03029371043082974, 0.020545699631835192, 0.01786615400247469, 0.021068140876929257, 0.022733322191212095, 0.029355338864510222, 0.022112702872863016, 0.008814126152236194, 0.0231220461112889, 0.02316462436648969, 0.06185876221795319, 0.026614495741462272, 0.025849191072501974, 0.02311550565446826, 0.024037187779245458, 0.029478527359763584, 0.027397985491818613, 0.025992119639792945, 0.028849266566704113, 0.030340502591967605, 0.02828498301617855, 0.02780838431961681, 0.010439079502516949, 0.02664158344103523, 0.03115014229944894, 0.03046001133837451, 0.026279899739901108, 0.025866034826092694, 0.027635269941627315, 0.024804629076568215, 0.026228964893771585, 0.025749778502859758, 0.025200237688035167, 0.023133037877197997, 0.024150595264661782, 0.02399639004768005, 0.008508042269156298, 0.01801646580777372, 0.021466562715740115, 0.0215704978154162]

percent_win_v_overall = []
percent_overall_v_steady = []
for i in range(len(percent_overall)):
    percent_win_v_overall.append(percent_winners[i]-percent_overall[i])
    percent_overall_v_steady.append((percent_steady[i]-percent_overall[i]))
# Space names
board_layout = ["Go","Med Ave","Com Ches","Balt Ave","Inc Tax","Read Rl","Orient","Chance","Vermont","Conn Ave","Jail","St Chas","Elec Co","States","Virginia","Penn Rl","St James","Com Ches","Tenn Ave","New York","Free Pk","Kentucky","Chance","Indiana","Illinois","B&O Rl","Atlantic","Ventnor","Water W","Marvin G","Go Jail","Pacific","North C","Com Ches","Penn Ave","Short Ln","Chance","Park Pl","Lux Tax","Boardwalk"]

data = percent_overall_v_steady

# Define the colormap (using 'inferno' or PuRd colormap)
cmap = plt.cm.OrRd

# Normalize the numbers to range from 0 to 1
if data is percent_win_v_overall:
    norm = Normalize(vmin=min(data), vmax=max(data))
else:
    norm = Normalize(vmin=min(data), vmax=max(data))

# Create a scalar mappable
sm = ScalarMappable(norm=norm, cmap=cmap)

# Map the numbers to colors

colors = [sm.to_rgba(number) for number in data]

for i, coord in enumerate(coords):
    small_square = plt.Rectangle(coord, small_square_size, small_square_size, color=colors[i])
    ax.add_patch(small_square)
    ax.text(coord[0]+0.5, coord[1]+0.5, f'{board_layout[i]}\n{f"{100*data[i]:0.2f}%"}', color='black', ha='center', va='center', fontsize=8)

# Set axis limits and labels
ax.set_xlim(0, large_square_size)
ax.set_ylim(0, large_square_size)
# ax.set_xticks(np.arange(0, large_square_size + 1, 1))
# ax.set_yticks(np.arange(0, large_square_size + 1, 1))
ax.set_xticklabels("")
ax.set_yticklabels("")
ax.set_aspect('equal')

# Show the plot
plt.title('Steady State vs Measured Space Distribution')
# plt.grid(True)
plt.tick_params(left = False, bottom = False)
plt.tight_layout()
plt.show()
