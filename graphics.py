import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import Normalize
from matplotlib.cm import ScalarMappable

# Define the size of the large square
large_square_size = 11

# Define the size of the smaller squares
small_square_size = 1

# Define the number of small squares along each side (excluding corners)
num_squares_side = 8

# Create the figure and axis
fig, ax = plt.subplots(figsize=(8, 8))

# Plot the large square
large_square = plt.Rectangle((0, 0), large_square_size, large_square_size, color='lightgrey', alpha=0.5)
ax.add_patch(large_square)

# Store the Coordinates
coords = [(10,0), (9,0), (8,0), (7,0), (6,0), (5,0), (4,0), (3,0), (2,0), (1,0), 
          (0,0), (0,1), (0,2), (0,3), (0,4), (0,5), (0,6), (0,7), (0,8), (0,9), (0,10),
          (1,10), (2,10), (3,10), (4,10), (5,10), (6,10), (7,10), (8,10), (9,10), (10,10),
          (10,9), (10,8), (10,7), (10,6), (10,5), (10,4), (10,3), (10,2), (10,1)]

# Distributions overall measured
percent_overall = [0.030679162121915644, 0.021313342054328673, 0.018987122868779873, 0.021631742416298217, 0.02330420663915282, 0.029656099690549165, 0.022655091089450814, 0.008665129870845733, 0.023261750859452788, 0.023053339133404214, 0.061939363230989204, 0.02705406878790216, 0.02606564100037388, 0.023724996912580024, 0.024643495831760044, 0.029206295980295286, 0.027900764490781518, 0.026164060722951056, 0.029322085834105043, 0.030825534537979603, 0.028824788029504063, 0.028348601551587256, 0.010493876598382877, 0.027360545572239978, 0.03186691475988233, 0.030657721387571727, 0.027063558698070003, 0.026780713545768445, 0.028066376334704827, 0.025844698619194254, 0.0, 0.02675462727561338, 0.026234495030003996, 0.023833188960349312, 0.024985576655247012, 0.024315257477365102, 0.008658927455244964, 0.021834651411882032, 0.021793231153937657, 0.026228955409555037]

percent_steady = [0.03057861328125, 0.0213470458984375, 0.01898193359375, 0.021636962890625, 0.0232391357421875, 0.0296173095703125, 0.0225372314453125, 0.008636474609375, 0.02313232421875, 0.0229644775390625, 0.062744140625, 0.0269927978515625, 0.0260009765625, 0.023712158203125, 0.024627685546875, 0.0291748046875, 0.027923583984375, 0.0261688232421875, 0.02935791015625, 0.0308380126953125, 0.028839111328125, 0.0283660888671875, 0.0104827880859375, 0.0273284912109375, 0.031829833984375, 0.0306549072265625, 0.027069091796875, 0.026763916015625, 0.028045654296875, 0.0258331298828125, 0.0, 0.0267486572265625, 0.026214599609375, 0.0240020751953125, 0.02496337890625, 0.0243072509765625, 0.00865936279296875, 0.021881103515625, 0.02178955078125, 0.0262908935546875]

percent_winners = [0.02973721113055759, 0.020654934248518362, 0.01886702679488142, 0.021565621321808722, 0.022765717875004345, 0.030018998303173165, 0.023728451015257092, 0.009029754420871235, 0.02430256558228726, 0.023815065436763715, 0.060881571645922034, 0.02781933738270393, 0.026077640167010707, 0.0240844365853957, 0.024980593635415098, 0.029145112682265818, 0.02810600759592696, 0.026277755508002813, 0.029437708048421066, 0.030816988372200003, 0.028745507267676464, 0.028234366059699756, 0.010392420496729688, 0.027210326940113168, 0.031773051993574275, 0.03020258872015833, 0.02687229547659831, 0.026723481836622334, 0.027810881385554435, 0.0258548067773388, 0.0, 0.026490108225151406, 0.025778494380528386, 0.02360970975950995, 0.024297861189506907, 0.02347122791886804, 0.008346188285103234, 0.023745511882745332, 0.020196851445190952, 0.028131822206943203]

percent_bankrupt = [0.030568523892983597, 0.021142649901450948, 0.018593681041489975, 0.021803888553096645, 0.023867792600524046, 0.030009554265452393, 0.02273920229550755, 0.008991117497952172, 0.023752220288719865, 0.023530358497186106, 0.06346499683462793, 0.02729072641813073, 0.02680418814018849, 0.023708532039352852, 0.02463318420705675, 0.0300409811776687, 0.02813865313705469, 0.0266162160530541, 0.029524699947977198, 0.030903642550679344, 0.02931539418667588, 0.02843585110998307, 0.01063968322093476, 0.027353180301952426, 0.031846460441921534, 0.031106591361217552, 0.026883060638563914, 0.02656096110022904, 0.028230386883497206, 0.025493519609672277, 0.0, 0.026477341938287123, 0.025933085915336763, 0.02373692782272847, 0.02474408352856487, 0.024480859458059213, 0.008688036188142042, 0.01902072289118078, 0.022101160199295457, 0.02282788386360354]

percent_non_terminate = [0.030685085972267, 0.021320085402390217, 0.01899275554019992, 0.02163139626377952, 0.023299705521827505, 0.029648341425120427, 0.02264733489198677, 0.008658156769544978, 0.023248293606764784, 0.02304173014630541, 0.06192280279709118, 0.027046062263850854, 0.026054499223562646, 0.023723382960817285, 0.024641702595787286, 0.029194284871116014, 0.02789617968868266, 0.026156468150680175, 0.02931842959189222, 0.030824542591464988, 0.028818046819805508, 0.028348008810466445, 0.010492141077687062, 0.027361573158319046, 0.03186752629102934, 0.030653487664067745, 0.02706716814053962, 0.02678434983012082, 0.028065167078047425, 0.025849607781625417, 0.0, 0.026759817783240325, 0.026241480642667365, 0.02383544786305497, 0.02499290705711932, 0.02431752290674549, 0.008660139363790004, 0.02186649224875643, 0.02179865245503492, 0.026269222752750912]

percent_win_v_non_terminate = []
percent_bankrupt_v_non_terminate = []
for i in range(len(percent_overall)):
    percent_win_v_non_terminate.append(percent_winners[i]-percent_non_terminate[i])
    percent_bankrupt_v_non_terminate.append((percent_bankrupt[i]-percent_non_terminate[i]))
# Space names
board_layout = ["Go","Med Ave","Com Ches","Balt Ave","Inc Tax","Read Rl","Orient","Chance","Vermont","Conn Ave","Jail","St Chas","Elec Co","States","Virginia","Penn Rl","St James","Com Ches","Tenn Ave","New York","Free Pk","Kentucky","Chance","Indiana","Illinois","B&O Rl","Atlantic","Ventnor","Water W","Marvin G","Go Jail","Pacific","North C","Com Ches","Penn Ave","Short Ln","Chance","Park Pl","Lux Tax","Boardwalk"]

data = percent_bankrupt_v_non_terminate

# Define the colormap (using 'inferno' or PuRd colormap)
cmap = plt.cm.OrRd

# Normalize the numbers to range from 0 to 1
norm = Normalize(vmin=min(data), vmax=max(data))

# Create a scalar mappable
sm = ScalarMappable(norm=norm, cmap=cmap)

# Map the numbers to colors

colors = [sm.to_rgba(number) for number in data]

for i, coord in enumerate(coords):
    small_square = plt.Rectangle(coord, small_square_size, small_square_size, color=colors[i])
    ax.add_patch(small_square)
    ax.text(coord[0]+0.5, coord[1]+0.5, f'{board_layout[i]}\n{f"{100*data[i]:0.2f}%"}', color='black', ha='center', va='center', fontsize=8)

# Set axis limits and labels
ax.set_xlim(0, large_square_size)
ax.set_ylim(0, large_square_size)
# ax.set_xticks(np.arange(0, large_square_size + 1, 1))
# ax.set_yticks(np.arange(0, large_square_size + 1, 1))
ax.set_xticklabels("")
ax.set_yticklabels("")
ax.set_aspect('equal')

# Show the plot
plt.title('Bankrupts against Non-terminating Space Distribution')
# plt.grid(True)
plt.tick_params(left = False, bottom = False)
plt.tight_layout()
plt.show()
