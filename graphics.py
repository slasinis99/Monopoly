import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import Normalize
from matplotlib.cm import ScalarMappable

# Define the size of the large square
large_square_size = 11

# Define the size of the smaller squares
small_square_size = 1

# Define the number of small squares along each side (excluding corners)
num_squares_side = 8

# Create the figure and axis
fig, ax = plt.subplots(figsize=(8, 8))

# Plot the large square
large_square = plt.Rectangle((0, 0), large_square_size, large_square_size, color='lightgrey', alpha=0.5)
ax.add_patch(large_square)

# Store the Coordinates
coords = [(10,0), (9,0), (8,0), (7,0), (6,0), (5,0), (4,0), (3,0), (2,0), (1,0), 
          (0,0), (0,1), (0,2), (0,3), (0,4), (0,5), (0,6), (0,7), (0,8), (0,9), (0,10),
          (1,10), (2,10), (3,10), (4,10), (5,10), (6,10), (7,10), (8,10), (9,10), (10,10),
          (10,9), (10,8), (10,7), (10,6), (10,5), (10,4), (10,3), (10,2), (10,1)]

# Distributions overall measured
percent_overall = [0.0308287799631877, 0.02147388262834988, 0.01912692871795136, 0.02178827621261418, 0.02347894386825062, 0.02979094887955039, 0.02282834585238599, 0.008726188804840466, 0.023435376723231663, 0.023225752663579447, 0.06240195739174339, 0.027171666938031247, 0.025166080560586872, 0.023898014973153688, 0.02370108419816444, 0.029426232074713187, 0.026950297141393936, 0.02635650784916031, 0.028356418420676596, 0.030978383396985106, 0.027821960967794854, 0.02855932634568896, 0.010101252837468976, 0.02756425908183739, 0.03186143287049584, 0.03072888089891296, 0.027132103986209, 0.02697554275192967, 0.028094521184618405, 0.026034968881988762, 0.0, 0.02695078746662334, 0.026387183869891247, 0.024010522156251234, 0.025156555351930697, 0.02449011540191095, 0.008724408714451367, 0.021993492784625847, 0.021954446111856558, 0.026348171076963484]

percent_steady = [0.03057861328125, 0.0213470458984375, 0.01898193359375, 0.021636962890625, 0.0232391357421875, 0.0296173095703125, 0.0225372314453125, 0.008636474609375, 0.02313232421875, 0.0229644775390625, 0.062744140625, 0.0269927978515625, 0.0260009765625, 0.023712158203125, 0.024627685546875, 0.0291748046875, 0.027923583984375, 0.0261688232421875, 0.02935791015625, 0.0308380126953125, 0.028839111328125, 0.0283660888671875, 0.0104827880859375, 0.0273284912109375, 0.031829833984375, 0.0306549072265625, 0.027069091796875, 0.026763916015625, 0.028045654296875, 0.0258331298828125, 0.0, 0.0267486572265625, 0.026214599609375, 0.0240020751953125, 0.02496337890625, 0.0243072509765625, 0.00865936279296875, 0.021881103515625, 0.02178955078125, 0.0262908935546875]

percent_winners = [0.02994894224712988, 0.020905478380412755, 0.01904371842309859, 0.021739228745359856, 0.022920882312327598, 0.030141267414891777, 0.023894624466053768, 0.009043975823685433, 0.024446485635838466, 0.02386911194379964, 0.061392827283779594, 0.02790765604626157, 0.025243346657013433, 0.02423183345584748, 0.024075117739436942, 0.029325435543835533, 0.027227834076453093, 0.026451650428387104, 0.02848667937742051, 0.030970580819446855, 0.027671018158687034, 0.028445495283525326, 0.010041438650276648, 0.02742553479238225, 0.03177139528609933, 0.030332255806125308, 0.02694850466613224, 0.026891762768811184, 0.027873952212514475, 0.02604350695642862, 0.0, 0.026624748767783573, 0.02599461506595499, 0.023819025487066617, 0.02447990504904761, 0.023672406699753307, 0.008373454405467927, 0.023835920067020854, 0.020359163411118084, 0.028129219645324745]

percent_bankrupt = [0.030713296226980172, 0.021199302335371265, 0.01873804869350955, 0.02208627258451243, 0.024019902948956444, 0.03008438679146116, 0.02296191032539452, 0.009020497482785259, 0.023936376691858167, 0.023581367712760655, 0.06396653688407582, 0.027378275354818196, 0.025826328644311537, 0.02388239057261871, 0.023711696532502206, 0.03023769901250075, 0.027130840633224743, 0.02677019027380862, 0.028524460562408604, 0.031033233132668342, 0.02829614882665707, 0.028641496817589908, 0.01023626966382955, 0.02757288805152365, 0.03184580083855984, 0.031157144509190313, 0.02696875293168954, 0.02678168197445764, 0.028294934984683752, 0.025710317190140494, 0.0, 0.026632190370776687, 0.02609009053539853, 0.023891404841699236, 0.02493947778946283, 0.024656970994460035, 0.008755014323982005, 0.019298336259438702, 0.022307341066521554, 0.023120724633411516]

percent_non_terminate = [0.030834897870190215, 0.021481617512034566, 0.019132505186246974, 0.021786414021467637, 0.02347493031974226, 0.029783113787459094, 0.022819309200452047, 0.00871944793675061, 0.02342102338958808, 0.023215954907308683, 0.062383566883793554, 0.02716374388636419, 0.025154990274131414, 0.023896187527318143, 0.023698558944961406, 0.02941403652364486, 0.026945844207915882, 0.026348926656415354, 0.028352951573854434, 0.030977808176915044, 0.027815354790538305, 0.028558537723440202, 0.010099416740991638, 0.027564858105029198, 0.03186223475323309, 0.030724499006994095, 0.027135797312833047, 0.026979047938204204, 0.028092522057610255, 0.02603982403126542, 0.0, 0.02695759593837387, 0.026393931645588398, 0.024012956508168398, 0.025164037149258738, 0.02449226484175868, 0.008725911555184707, 0.02202624209336371, 0.021959697477143793, 0.02638944154446581]

percent_win_v_overall = []
percent_overall_v_steady = []
for i in range(len(percent_overall)):
    percent_win_v_overall.append(percent_winners[i]-percent_overall[i])
    percent_overall_v_steady.append((-percent_steady[i]+percent_non_terminate[i]))
# Space names
board_layout = ["Go","Med Ave","Com Ches","Balt Ave","Inc Tax","Read Rl","Orient","Chance","Vermont","Conn Ave","Jail","St Chas","Elec Co","States","Virginia","Penn Rl","St James","Com Ches","Tenn Ave","New York","Free Pk","Kentucky","Chance","Indiana","Illinois","B&O Rl","Atlantic","Ventnor","Water W","Marvin G","Go Jail","Pacific","North C","Com Ches","Penn Ave","Short Ln","Chance","Park Pl","Lux Tax","Boardwalk"]

data = percent_overall_v_steady

# Define the colormap (using 'inferno' or PuRd colormap)
cmap = plt.cm.OrRd

# Normalize the numbers to range from 0 to 1
if data is percent_win_v_overall:
    norm = Normalize(vmin=min(data), vmax=max(data))
else:
    norm = Normalize(vmin=min(data), vmax=max(data))

# Create a scalar mappable
sm = ScalarMappable(norm=norm, cmap=cmap)

# Map the numbers to colors

colors = [sm.to_rgba(number) for number in data]

for i, coord in enumerate(coords):
    small_square = plt.Rectangle(coord, small_square_size, small_square_size, color=colors[i])
    ax.add_patch(small_square)
    ax.text(coord[0]+0.5, coord[1]+0.5, f'{board_layout[i]}\n{f"{100*data[i]:0.2f}%"}', color='black', ha='center', va='center', fontsize=8)

# Set axis limits and labels
ax.set_xlim(0, large_square_size)
ax.set_ylim(0, large_square_size)
# ax.set_xticks(np.arange(0, large_square_size + 1, 1))
# ax.set_yticks(np.arange(0, large_square_size + 1, 1))
ax.set_xticklabels("")
ax.set_yticklabels("")
ax.set_aspect('equal')

# Show the plot
plt.title('Non-terminate - Steady State Space Distribution')
# plt.grid(True)
plt.tick_params(left = False, bottom = False)
plt.tight_layout()
plt.show()
